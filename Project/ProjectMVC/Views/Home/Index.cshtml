@{
    ViewData["Title"] = "Leaderboards";

    var leaderboards = ViewBag.Leaderboards as List<string> ?? new List<string>();
}

<style>
    /* Container matches your form/login containers */
    .leaderboards-container {
        background-color: #1a1a1a;
        border-radius: 8px;
        padding: 30px 25px;
        margin: 40px auto;
        max-width: 420px;
        border: 2px solid #333;
        box-shadow: 0 0 10px #444;
        color: #ddd;
        font-family: 'Courier New', monospace;
        text-align: left;
    }

    /* Leaderboard item style adapted from input and btn */
    .leaderboard-item {
        background-color: #0d0d0d;
        border: 1px solid #555;
        padding: 10px 15px;
        border-radius: 6px;
        margin-bottom: 14px;
        color: #ddd;
        font-size: 1rem;
        cursor: default;
        transition: background-color 0.3s ease;
        display: flex;
        align-items: center;
        gap: 10px;
    }
    .leaderboard-item:hover {
        background-color: #222;
    }

    /* No leaderboards message style consistent with text and shadows */
    .no-leaderboards-msg {
        font-size: 1.2rem;
        color: #bbb;
        text-align: center;
        margin: 40px 0;
        font-family: 'Courier New', monospace;
        text-shadow: 0 0 3px #666;
    }

    /* Inline create button matches your .btn styles */
    .create-leaderboard-btn-inline {
        margin-top: 20px;
        padding: 10px 30px;
        font-size: 1.1rem;
        background-color: #222;
        border: 2px solid #888;
        color: #ddd;
        border-radius: 8px;
        cursor: pointer;
        width: auto;
        display: inline-block;
        text-shadow: 0 0 3px #aaa;
        transition: background-color 0.3s ease, border-color 0.3s ease;
    }
    .create-leaderboard-btn-inline:hover {
        background-color: #333;
        border-color: #ccc;
    }

    /* Fixed button bottom left, adapted from .btn */
    .create-leaderboard-btn {
        position: fixed;
        bottom: 20px;
        left: 20px;
        background-color: #222;
        color: #ddd;
        border: 2px solid #888;
        border-radius: 8px;
        padding: 10px 30px;
        font-size: 1.1rem;
        cursor: pointer;
        box-shadow: 0 0 10px #444;
        text-shadow: 0 0 3px #aaa;
        transition: background-color 0.3s ease, border-color 0.3s ease;
        z-index: 1000;
    }
    .create-leaderboard-btn:hover {
        background-color: #333;
        border-color: #ccc;
    }

    h2 {
        font-family: 'Courier New', monospace;
        font-size: 2.5rem;
        margin-bottom: 20px;
        color: #ddd;
        text-shadow: 0 0 5px #fff;
        text-align: center;
    }
    
    .board-name {
        flex-grow: 1;
        cursor: default;
    }

    .board-edit-input {
        flex-grow: 1;
        padding: 6px 10px;
        font-family: 'Courier New', monospace;
        font-size: 1rem;
        border-radius: 6px;
        border: 1px solid #555;
        background-color: #0d0d0d;
        color: #ddd;
        display: none;
    }

    .edit-btn,
    .save-btn,
    .cancel-btn,
    .manage-btn {
        background-color: #222;
        border: 2px solid #888;
        border-radius: 6px;
        color: #ddd;
        cursor: pointer;
        padding: 6px 12px;
        font-size: 0.9rem;
        text-shadow: 0 0 3px #aaa;
        transition: background-color 0.3s ease, border-color 0.3s ease;
        margin-left: 5px;
    }

    .edit-btn:hover,
    .save-btn:hover,
    .cancel-btn:hover,
    .manage-btn:hover {
        background-color: #333;
        border-color: #ccc;
    }
</style>

<h2>@ViewData["Title"]</h2>

<div id="leaderboards-container" class="leaderboards-container"></div>

<button class="create-leaderboard-btn" onclick="createLeaderboard()">
    Create Leaderboard
</button>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        try {
            const leaderboards = @Html.Raw(ViewBag.Leaderboards ?? "[]");
            
            console.log("Leaderboards:", leaderboards);
            console.log("Type of leaderboards:", typeof leaderboards);
            console.log("Is array:", Array.isArray(leaderboards));
            console.log("Content:", leaderboards);

            renderLeaderboards(leaderboards);
        } catch (err) {
            alert("Error in document.ready:\n" + err.message + "\n" + err.stack);
        }
    });

    function renderLeaderboards(leaderboards) {
        try {
            const container = $('#leaderboards-container');
            container.empty();
            if (!leaderboards || leaderboards.length === 0) {
                container.html(`
                    <div class="no-leaderboards-msg">
                        You don’t have any leaderboards
                        <br />
                        <button class="create-leaderboard-btn-inline" onclick="createLeaderboard()">
                            Create Leaderboard
                        </button>
                    </div>
                `);
                return;
            } 
            
            leaderboards.forEach(board => {
                container.append(renderLeaderboardItem(board));
            });
        } catch (err) {
            alert("Error in renderLeaderboards:\n" + err.message + "\n" + err.stack);
        }
    }

    function loadLeaderboards(userId) {
        try {
            $.ajax({
                url: '/leaderboards',
                type: 'GET',
                data: { userId: userId },
                success: function (leaderboards) {
                    try {
                        renderLeaderboards(leaderboards);
                    } catch (err) {
                        alert("Error in AJAX success (loadLeaderboards):\n" + err.message + "\n" + err.stack);
                    }
                },
                error: function (xhr, status, error) {
                    alert('Failed to load leaderboards:\n' + error);
                }
            });
        } catch (err) {
            alert("Error in loadLeaderboards:\n" + err.message + "\n" + err.stack);
        }
    }

function manageLeaderboard(id) {
    var url = '/Record/Index?leaderboardId=' + encodeURIComponent(id);
    window.location.href = url;
}



    function renderLeaderboardItem(board) {
        try {
            return `
                <div class="leaderboard-item" data-id="${board.Id}">
                    <span class="board-name">${escapeHtml(board.Name)}</span>
                    <input class="board-edit-input" type="text" value="${escapeHtml(board.Name)}" style="display:none;" />
                    <button class="edit-btn" onclick="startEdit(this)">Edit</button>
                    <button class="save-btn" onclick="saveEdit(this)" style="display:none;">Save</button>
                    <button class="manage-btn" onclick="manageLeaderboard('${board.Id}')">Manage</button>
                </div>
            `;
        } catch (err) {
            alert("Error in renderLeaderboardItem:\n" + err.message + "\n" + err.stack);
            return "";
        }
    }

    function escapeHtml(text) {
        try {
            return $('<div>').text(text).html();
        } catch (err) {
            alert("Error in escapeHtml:\n" + err.message + "\n" + err.stack);
            return text;
        }
    }

    function startEdit(button) {
        try {
            const item = $(button).closest('.leaderboard-item');
            item.find('.board-name').hide();
            item.find('.board-edit-input').show().focus();
            item.find('.edit-btn').hide();
            item.find('.manage-btn').hide();
            item.find('.save-btn').show();
        } catch (err) {
            alert("Error in startEdit:\n" + err.message + "\n" + err.stack);
        }
    }

    function cancelEdit(button) {
        try {
            const item = $(button).closest('.leaderboard-item');
            const input = item.find('.board-edit-input');
            const nameSpan = item.find('.board-name');
            input.val(nameSpan.text());
            input.hide();
            nameSpan.show();
            item.find('.edit-btn').show();
            item.find('.manage-btn').show();
            item.find('.save-btn').hide();
        } catch (err) {
            alert("Error in cancelEdit:\n" + err.message + "\n" + err.stack);
        }
    }

    function saveEdit(button) {
        try {
            const item = $(button).closest('.leaderboard-item');
            const input = item.find('.board-edit-input');
            const newName = input.val().trim();
            if (!newName) {
                alert('Leaderboard name cannot be empty.');
                return;
            }

            const id = item.data('id');

            const updatedLeaderboard = {
                id: id,
                name: newName
            };

            $.ajax({
                url: '/leaderboards',
                type: 'PATCH',
                contentType: 'application/json',
                data: JSON.stringify(updatedLeaderboard),
                success: function (updated) {
                    try {
                        item.find('.board-name').text(newName);
                        cancelEdit(button); 
                        alert('Leaderboard updated!');
                    } catch (err) {
                        alert("Error in AJAX success (saveEdit):\n" + err.message + "\n" + err.stack);
                    }
                },
                error: function () {
                    alert('Failed to update leaderboard');
                }
            });
        } catch (err) {
            alert("Error in saveEdit:\n" + err.message + "\n" + err.stack);
        }
    }

    function createLeaderboard() {
        try {
            var leaderboard = {
                Id: "askljdfhkdsal"
            };

            $.ajax({
                url: '/leaderboards',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(leaderboard),
                success: function (created) {
                    try {
                        alert('Leaderboard created!');
                        location.reload();
                    } catch (err) {
                        alert("Error in AJAX success (createLeaderboard):\n" + err.message + "\n" + err.stack);
                    }
                },
                error: function (xhr) {
                    alert('Failed to create leaderboard\n' + xhr.responseText);
                }
            });
        } catch (err) {
            alert("Error in createLeaderboard:\n" + err.message + "\n" + err.stack);
        }
    }
</script>
